{{>partial_header}}
{{#models}}
{{#model}}
#![allow(unused_imports)]
{{#description}}
/// {{{classname}}} : {{{description}}}
{{/description}}

use serde_json::Value;
use bigdecimal::BigDecimal;
use chrono::{NaiveDateTime, DateTime, FixedOffset};

use crate::models::*;
use crate::date_serializer;
use crate::datetime_serializer;

#[derive(Debug, Serialize, Deserialize, Clone)]
{{^isEnum}}
pub struct {{classname}} {
{{#vars}}
  {{#dataFormat}}
  {{#example}}
  #[serde(with = "{{{dataFormat}}}_serializer")] // {{{example}}}
  {{/example}}
  {{/dataFormat}}
  #[serde(rename = "{{{baseName}}}")]
  {{name}}: {{^required}}Option<{{/required}}{{{datatype}}}{{^required}}>{{/required}}{{#hasMore}},{{/hasMore}} {{#example}} // {{{example}}} {{/example}}
{{/vars}}
}

impl {{classname}} {
  pub fn new({{#requiredVars}}{{name}}: {{{datatype}}}, {{/requiredVars}}) -> {{classname}} {
    {{classname}} {
      {{#vars}}
      {{name}}: {{#required}}{{name}}{{/required}}{{^required}}{{#isListContainer}}None{{/isListContainer}}{{#isMapContainer}}None{{/isMapContainer}}{{^isContainer}}None{{/isContainer}}{{/required}}{{#hasMore}},{{/hasMore}}
      {{/vars}}
    }
  }

  {{#vars}}
  pub fn set_{{name}}(&mut self, {{name}}: {{{datatype}}}) {
    self.{{name}} = {{^required}}Some({{name}}){{/required}}{{#required}}{{name}}{{/required}};
  }

  pub fn with_{{name}}(mut self, {{name}}: {{{datatype}}}) -> {{classname}} {
    self.{{name}} = {{^required}}Some({{name}}){{/required}}{{#required}}{{name}}{{/required}};
    self
  }

  pub fn {{name}}(&self) -> {{^required}}Option<{{/required}}&{{{datatype}}}{{^required}}>{{/required}} {
    {{#required}}&{{/required}}self.{{name}}{{^required}}.as_ref(){{/required}}
  }

  {{^required}}
  pub fn reset_{{name}}(&mut self) {
    self.{{name}} = None;
  }
  {{/required}}

  {{/vars}}
}
{{/isEnum}}
{{#isEnum}}
pub enum {{name}} {
  {{#allowableValues}}
  {{#enumVars}}
  #[serde(alias = "{{{value}}}")]
  {{name}},
  {{/enumVars}}
  {{/allowableValues}}
}
{{/isEnum}}


{{/model}}
{{/models}}
