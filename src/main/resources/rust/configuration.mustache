{{>partial_header}}
use hyper;
use std::collections::HashMap;
use hyper::Body;
use hyper::client::connect::Connect;

pub struct Configuration<C: hyper::client::connect::Connect, B = Body> {
  pub base_path: String,
  pub user_agent: Option<String>,
  pub client: hyper::client::Client<C, B>,
  pub basic_auth: Option<BasicAuth>,
  pub oauth_access_token: Option<String>,
  pub api_key: Option<ApiKey>,
  // TODO: take an oauth2 token source, similar to the go one
}

pub type BasicAuth = (String, Option<String>);

pub struct ApiKey {
  pub prefix: Option<String>,
  pub key: String,
}

impl<C, B> Configuration<C, B> 
where
    C: Connect + Clone + Send + Sync + 'static,
    B: Payload + Send + 'static,
    B::Data: Send
{
  pub fn new(client: hyper::client::Client<C, B>) -> Configuration<C, B> {
    Configuration {
      base_path: "{{{basePath}}}".to_owned(),
      user_agent: {{#httpUserAgent}}Some("{{{.}}}".to_owned()){{/httpUserAgent}}{{^httpUserAgent}}Some("Swagger-Codegen/{{version}}/rust".to_owned()){{/httpUserAgent}},
      client: client,
      basic_auth: None,
      oauth_access_token: None,
      api_key: None,
    }
  }
}
