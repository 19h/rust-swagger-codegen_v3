{{>partial_header}}
#![allow(unused_imports)]
use std::rc::Rc;
use std::borrow::Borrow;
use std::borrow::Cow;
use std::collections::HashMap;

use hyper;
use serde_json;
use tokio::runtime::Runtime;
use futures;
use futures::{Future, Stream};
use bigdecimal::BigDecimal;

use hyper::Body;
use hyper::body::Bytes;
use hyper::body::HttpBody;
use std::str::FromStr;
use chrono::{NaiveDateTime, DateTime, FixedOffset};
use crate::models::*;
use super::{Error, configuration};
use headers::{Authorization, Header};
use headers::authorization::Credentials;

pub struct {{{classname}}}Client<C: hyper::client::connect::Connect + Clone + Send + Sync> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect + Clone + Send + Sync + 'static> {{{classname}}}Client<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> {{{classname}}}Client<C> {
        {{{classname}}}Client {
            configuration: configuration,
        }
    }
}

pub trait {{classname}} {
{{#operations}}
{{#operation}}
    fn {{{operationId}}}(&self, {{#allParams}}{{paramName}}: {{#isString}}&str{{/isString}}{{#isUuid}}&str{{/isUuid}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{^isContainer}}crate::models::{{/isContainer}}{{/isPrimitiveType}}{{{dataType}}}{{/isUuid}}{{/isString}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Box<Result<{{^returnType}}(){{/returnType}}{{#returnType}}{{{returnType}}}{{/returnType}}, Error<serde_json::Value>>>;
{{/operation}}
{{/operations}}
}


impl<C: hyper::client::connect::Connect + Clone + Send + Sync + 'static>{{classname}} for {{classname}}Client<C> {
{{#operations}}
{{#operation}}
    fn {{{operationId}}}(&self, {{#allParams}}{{paramName}}: {{#isString}}&str{{/isString}}{{#isUuid}}&str{{/isUuid}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{^isContainer}}crate::models::{{/isContainer}}{{/isPrimitiveType}}{{{dataType}}}{{/isUuid}}{{/isString}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Box<Result<{{^returnType}}(){{/returnType}}{{#returnType}}{{{returnType}}}{{/returnType}}, Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

{{#hasAuthMethods}}
        let mut auth_headers = HashMap::<String, String>::new();
        let auth_query = HashMap::<String, String>::new();
{{#authMethods}}
{{#isApiKey}}
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
        {{#isKeyInHeader}}
            auth_headers.insert("{{keyParamName}}".to_owned(), val);
        {{/isKeyInHeader}}
        {{#isKeyInQuery}}
            auth_query.insert("{{keyParamName}}".to_owned(), val);
        {{/isKeyInQuery}}
        };
{{/isApiKey}}
{{#isBasic}}
        if let Some(ref auth_conf) = configuration.basic_auth {
            let basic = Authorization::basic(auth_conf.0, auth_conf.1);
            auth_headers.insert("Authorization".to_owned(), basic.to_string());
        };
{{/isBasic}}
{{#isOAuth}}
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
{{/isOAuth}}
{{#isBearer}}
        if let Some(ref token) = configuration.oauth_access_token {
            auth_headers.insert("Authorization".to_owned(), format!("Bearer {}", token));
        }
{{/isBearer}}
{{/authMethods}}
{{/hasAuthMethods}}
        let method = hyper::Method::{{httpMethod}};

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
{{#queryParams}}
            query.append_pair("{{baseName}}", &serde_json::to_string( &{{paramName}}{{#isListContainer}}.join(","){{/isListContainer}} ).unwrap());
{{/queryParams}}
{{#hasAuthMethods}}
            for (key, val) in &auth_query {
                query.append_pair(key, val);
            }
{{/hasAuthMethods}} 
            query.finish()
        };
        let uri_str = format!("{}{{{path}}}?{}", configuration.base_path, query_string{{#pathParams}}, {{baseName}}={{paramName}}{{#isListContainer}}.join(",").as_ref(){{/isListContainer}}{{/pathParams}});

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        dbg!(&uri_str);
        let uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::builder()
            .method(method)
            .uri(uri);

        let headers = req.headers_mut().unwrap();
        if let Some(ref user_agent) = configuration.user_agent {
            headers.insert(hyper::header::USER_AGENT, user_agent.parse().unwrap());
        }

        {{#hasHeaderParams}}
        {
            {{#headerParams}}
            headers.insert("{{baseName}}", {{paramName}}{{#isListContainer}}.join(",").as_ref(){{/isListContainer}});
            {{/headerParams}}
        }
        {{/hasHeaderParams}}

        {{#hasAuthMethods}}
        for (key, val) in auth_headers {
            headers.insert(hyper::header::HeaderName::from_str(key.as_ref()).unwrap(), val.parse().unwrap());
        }
        {{/hasAuthMethods}}

        let somebody = Body::empty();
        {{#hasBodyParam}}
        {{#bodyParams}}
        let serialized = serde_json::to_string(&{{paramName}}).unwrap();
        headers.insert(hyper::header::CONTENT_TYPE, "application/json".parse().unwrap());
        headers.insert(hyper::header::CONTENT_LENGTH, format!("{}", serialized.len()).parse().unwrap());
        let somebody = Body::from(serialized);
        {{/bodyParams}}
        {{/hasBodyParam}}

        let req = req.body(somebody).unwrap();

        let mut r = Runtime::new().unwrap();
        // send request
        let ass = async {
            let a = configuration.client.request(req)
                                 .await
                                 .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });

            let mut a = a?;

            let status = a.status();
            let bd = a.body_mut().data().await.unwrap_or(Ok(Bytes::new())).unwrap_or(Bytes::new());

            let a = if status.is_success() {
                        Ok(bd)
                    } else {
                        Err(Error::from((status, bd.borrow())))
                    };

            let mut a = a?;
            {{^returnType}}
            Result::ok(()))
            {{/returnType}}

            {{#returnType}}
            let a = serde_json::from_slice(a.borrow())
                .map_err(|e| -> Error<serde_json::Value> { Error::from(e) });
            a
            {{/returnType}}
        };
        let a = r.block_on(ass);
        Box::new(a)

    }

{{/operation}}
{{/operations}}
}
