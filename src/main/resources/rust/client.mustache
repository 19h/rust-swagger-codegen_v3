use std::rc::Rc;

use hyper;
use super::configuration::Configuration;
use hyper::Body;
use hyper::client::connect::Connect;

pub struct APIClient<C: Connect, B = Body> {
  configuration: Rc<Configuration<C, B>>,
{{#apiInfo}}
{{#apis}}
{{#operations.[0]}}
  {{classFilename}}: Box<::apis::{{classname}}>,
{{/operations.[0]}}
{{/apis}}
{{/apiInfo}}
}

impl<C, B> APIClient<C, B> 
where
    C: Connect + Clone + Send + Sync + 'static,
    B: Payload + Send + 'static,
    B::Data: Send,
{
  pub fn new(configuration: Configuration<C, B>) -> APIClient<C, B> {
    let rc = Rc::new(configuration);

    APIClient {
      configuration: rc.clone(),
{{#apiInfo}}
{{#apis}}
{{#operations.[0]}}
      {{classFilename}}: Box::new(::apis::{{classname}}Client::new(rc.clone())),
{{/operations.[0]}}
{{/apis}}
{{/apiInfo}}
    }
  }

{{#apiInfo}}
{{#apis}}
{{#operations.[0]}}
  pub fn {{classFilename}}(&self) -> &::apis::{{classname}}{
    self.{{classFilename}}.as_ref()
  }
{{/operations.[0]}}
{{/apis}}
{{/apiInfo}}

}
